@model StronglyTypedHtmlHelperMVC.Models.SignUp

@{
    ViewBag.Title = "Index";
}

<h2>Index</h2>

@using (Html.BeginForm())
{
    @Html.HiddenFor(model => model.UserId)

    //        STRONGLY TYPED HTML HELPERS IN MVC
    //    •	It enables these helper methods to directly associate with model properties in a strongly typed views.
    //    •	It provides helper methods that you can use only in strongly typed views.

    //    •	Html.LabelFor()
    //          o Is the strongly typed version of the Html.Label() helper method that uses a lambda expression as its parameter, which provides compile time checking.
    //          Html.DisplayNameFor()
    //      o Is used to display the names of model properties.
    //      	Html.DisplayFor()
    //      o Is used to display the values of the model properties.
    //      	Html.TextBoxFor()
    //      o Is the strongly typed version of the Html.TextBox()helper method.
    //      	Html.TextAreaFor()
    //      o Is the strongly typed version of the Html.TextArea()helper method that generates the same markup as that of the Html.TextArea()helper method.
    //      	Html.EditorFor()
    //      o Is used to display an editor for the specified model property.
    //      	Html.PasswordFor()
    //      o   Is the strongly typed version of the Html.Password()helper method.
    //      	Html.DropDownListFor()
    //      o   Is the strongly typed version of the Html.DropDownList()helper method that allows selection of a single item.

    <p>@Html.LabelFor(model => model.UserName) &nbsp; @Html.TextBoxFor(model => model.UserName, new { @class = "form-control" })</p>
    <p>@Html.LabelFor(model => model.UserPassword) &nbsp; @Html.PasswordFor(model => model.UserPassword, new { @class = "form-control" })</p>
    <p>@Html.LabelFor(model => model.UserGender) &nbsp; @Html.DropDownListFor(model => model.UserGender, new SelectList(new[] { "Male", "Female" }), "Select", new { @class = "form-control" })</p>
    <p>@Html.LabelFor(model => model.UserEmail) &nbsp; @Html.TextBoxFor(model => model.UserEmail, new { @class = "form-control" })</p>
    @*  <p>@Html.LabelFor(model => model.UserEmail) &nbsp; @Html.EditorFor(model => model.UserEmail)</p>
        there is one diffrence betwwen textbox and EditerBox that is in the textbox wen can ender any type of datatype
        and the other side EditerBox convert automaticly his datatype as the values come from other class and we can not apply bootstrap class on EditerBox
        
        , new { @class = "form-control" }
        this parameter is to add bootstrap class
    *@

    <p>@Html.LabelFor(model => model.UserComment) &nbsp; @Html.TextAreaFor(model => model.UserComment, new { @class = "form-control" })</p>

    <input type="submit" value="Sumbit" class = "form-control" />
}